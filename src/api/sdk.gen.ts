// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { AddCategoryData, AddCategoryResponses, CreateToDoData, CreateToDoResponses, DeleteCategoryData, DeleteCategoryResponses, DeleteToDoData, DeleteToDoResponses, GetAllBuildingBlocksData, GetAllBuildingBlocksResponses, GetAllCategoriesData, GetAllCategoriesResponses, GetAllToDosData, GetAllToDosResponses, SetCompletedData, SetCompletedResponses, SetDueTodayData, SetDueTodayResponses, UpdateLinkDataData, UpdateLinkDataResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * GET todoApp/categories
 */
export const getAllCategories = <ThrowOnError extends boolean = false>(options?: Options<GetAllCategoriesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllCategoriesResponses, unknown, ThrowOnError>({
        url: '/todoApp/categories',
        ...options
    });
};

/**
 * POST todoApp/categories
 */
export const addCategory = <ThrowOnError extends boolean = false>(options: Options<AddCategoryData, ThrowOnError>) => {
    return (options.client ?? client).post<AddCategoryResponses, unknown, ThrowOnError>({
        url: '/todoApp/categories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * DELETE todoApp/categories/{id}
 */
export const deleteCategory = <ThrowOnError extends boolean = false>(options: Options<DeleteCategoryData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteCategoryResponses, unknown, ThrowOnError>({
        url: '/todoApp/categories/{id}',
        ...options
    });
};

/**
 * GET todoApp/buildingBlocks
 */
export const getAllBuildingBlocks = <ThrowOnError extends boolean = false>(options?: Options<GetAllBuildingBlocksData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllBuildingBlocksResponses, unknown, ThrowOnError>({
        url: '/todoApp/buildingBlocks',
        ...options
    });
};

/**
 * PUT todoApp/todo/{id}/data
 */
export const updateLinkData = <ThrowOnError extends boolean = false>(options: Options<UpdateLinkDataData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateLinkDataResponses, unknown, ThrowOnError>({
        url: '/todoApp/todo/{id}/data',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * PATCH todoApp/todo/{id}/complete
 */
export const setCompleted = <ThrowOnError extends boolean = false>(options: Options<SetCompletedData, ThrowOnError>) => {
    return (options.client ?? client).patch<SetCompletedResponses, unknown, ThrowOnError>({
        url: '/todoApp/todo/{id}/complete',
        ...options
    });
};

/**
 * PATCH todoApp/todo/{id}/due-today
 */
export const setDueToday = <ThrowOnError extends boolean = false>(options: Options<SetDueTodayData, ThrowOnError>) => {
    return (options.client ?? client).patch<SetDueTodayResponses, unknown, ThrowOnError>({
        url: '/todoApp/todo/{id}/due-today',
        ...options
    });
};

/**
 * GET todoApp/todo
 */
export const getAllToDos = <ThrowOnError extends boolean = false>(options?: Options<GetAllToDosData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllToDosResponses, unknown, ThrowOnError>({
        url: '/todoApp/todo',
        ...options
    });
};

/**
 * POST todoApp/todo
 */
export const createToDo = <ThrowOnError extends boolean = false>(options: Options<CreateToDoData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateToDoResponses, unknown, ThrowOnError>({
        url: '/todoApp/todo',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * DELETE todoApp/todo/{id}
 */
export const deleteToDo = <ThrowOnError extends boolean = false>(options: Options<DeleteToDoData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteToDoResponses, unknown, ThrowOnError>({
        url: '/todoApp/todo/{id}',
        ...options
    });
};
